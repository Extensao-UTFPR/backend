openapi: "3.0.0"
info:
  version: 1.0.0
  title: API Backend
  termsOfService: http://swagger.io/terms/
  contact:
    email: vinicius@utfpr.edu.br
servers:
- url: http://localhost:3333
paths:
  /users:
    post:
      summary: Criar um novo usuário
      description: Criar um novo usuário
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    get:
      summary: Listar usuários
      description: Listar usuários paginado e com filtros
      tags:
      - users
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: pagina a ser trazida
        - in: query
          name: limit
          schema:
            type: integer
          description: limite de registros
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{user_id}:
    get:
      summary: Listar informações de um user
      parameters:
        - $ref: '#/components/parameters/user_id'
      description: Listar informações de um user
      tags:
      - users
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    put:
      summary: Atualizar um usuário
      parameters:
        - $ref: '#/components/parameters/user_id'
      description: Atualizar um usuário
      tags:
      - users
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    delete:
      parameters:
      - $ref: '#/components/parameters/user_id'
      summary: Deletar um usuário
      description: Atualizar um usuário
      tags:
      - users
      responses:
        200:
          description: Sucesso ao deletar user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

        404:
          description: Não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /products:
    post:
      summary: criar produto
      tags:
        - products
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'


tags:
  - name: users
    description: Tudo sobre usuários
  - name: products
    description: Tudo sobre produtos

components:
  parameters:
    user_id:
      required: true
      description: 'id do user a ser operado'
      name: user_id
      in: path
      schema:
        type: string
  schemas:
    User:
      type: object
      required:
          - id
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        password:
          type: string
        cpf:
          type: string
        role:
          type: string
        created_at:
          type: string
        updated_at:
          type: string

    NotFound:
      type: object
      required:
          - status
      properties:
        status:
          type: string
        message:
          type: string


  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT


